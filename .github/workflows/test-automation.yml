name: Test Automation
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "main"
jobs:
  run:
    runs-on: ubuntu-latest
    env:
      OS: ubuntu-latest
      PYTHON: '3.11'
    steps:
    - name: Checkout Branch
      uses: actions/checkout@master
    - name: Setup Python
      uses: actions/setup-python@master
      with:
        python-version: 3.11
    - name: Setup Poetry
      uses: abatilo/actions-poetry@v2.1.6
      with:
        poetry-version: 1.4.2
    - name: Setup Test Environment
      run: docker compose -f docker-compose.ci.yml up -d
    - name: Install Dependencies
      run: poetry install --with dev
    - name: Generate coverage report
      run: poetry run pytest --cov='core' --cov-report=xml
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./coverage/reports/
        env_vars: OS,PYTHON
        fail_ci_if_error: true
        files: ./coverage.xml,./coverage1.xml,./coverage2.xml,!./cache
        flags: unittests
        name: codecov-umbrella
        verbose: true
    - name: Send Notification to Slack
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        fields: workflow,job,message,commit,repo,ref,author,took
        custom_payload: |
          {
            attachments: [{
              author_name: "Github CI/CD",
              title: "테스트 자동화 결과",
              color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
              text: `프로젝트 : [${process.env.AS_REPO}]\n브랜치 : ${process.env.AS_REF}\n작성자 : ${process.env.AS_AUTHOR}\n커밋 : ${process.env.AS_MESSAGE} (${process.env.AS_COMMIT})\n상태 : ${'${{ job.status }}' === 'success' ? '성공' : '${{ job.status }}' === 'failure' ? '실패' : '경고'}`,
            }]
          }
        if_mention: failure,cancelled
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()
